#!/bin/sh

set -e

perr() {
  printf "%s\n" "$*" >&2
}

SRC_DIR="src"
OUTPUT_DIR="out"
CV_SRC="${SRC_DIR}/cv.typ"

# load language configuration
LANG_CONFIG="${SRC_DIR}/languages.yaml"
DEFAULT_LANG="en"

get_available_languages() {
  yq eval '.languages | keys | .[]' "${LANG_CONFIG}" | tr '\n' ' ' | sed 's/ $//'
}

get_default_language() {
  yq eval '.default' "${LANG_CONFIG}"
}

AVAILABLE_LANGS=$(get_available_languages)
DEFAULT_LANG=$(get_default_language)

ensure_output() {
  mkdir -p "${OUTPUT_DIR}"
}

show_help() {
  perr "Available commands:" \
    && perr "  help             Show this help message" \
    && perr "  build [lang]     Build CV PDF (default: ${DEFAULT_LANG}, available: ${AVAILABLE_LANGS})" \
    && perr "  build-all        Build CV PDFs for all languages" \
    && perr "  check [lang]     Check CV compilation without building" \
    && perr "  check-all        Check CV compilation for all languages" \
    && perr "  validate         Validate data consistency across languages" \
    && perr "  fmt              Format Typst files in place" \
    && perr "  watch [lang]     Watch for changes and auto-rebuild"
}

build_cv() {
  lang="${1:-${DEFAULT_LANG}}"
  output_file="${OUTPUT_DIR}/jago-cv-${lang}.pdf"

  ensure_output \
    && printf "üî® Building CV (%s)...\n" "${lang}" \
    && typst compile --root . --input lang="${lang}" "${CV_SRC}" "${output_file}" \
    && printf "‚úÖ CV built: %s\n" "${output_file}"
}

build_all_cv() {
  printf "üî® Building CVs for all languages...\n"
  pids=""
  failed_langs=""

  # start builds
  for lang in ${AVAILABLE_LANGS}; do
    (
      if build_cv "${lang}"; then
        echo "SUCCESS:${lang}" >"/tmp/cv_build_${lang}.status"
      else
        echo "FAILED:${lang}" >"/tmp/cv_build_${lang}.status"
      fi
    ) &
    pids="${pids} $!"
  done

  # wait for all builds to complete
  for pid in ${pids}; do
    wait "$pid"
  done

  # check results and clean up
  success=true
  for lang in ${AVAILABLE_LANGS}; do
    if [ -f "/tmp/cv_build_${lang}.status" ]; then
      status=$(cat "/tmp/cv_build_${lang}.status")
      case "$status" in
      FAILED:*)
        failed_langs="${failed_langs} ${lang}"
        success=false
        ;;
      esac
      rm -f "/tmp/cv_build_${lang}.status"
    fi
  done

  if $success; then
    printf "‚úÖ All CVs built successfully\n"
  else
    printf "‚ùå Some CV builds failed:%s\n" "${failed_langs}"
    return 1
  fi
}

check_cv() {
  lang="${1:-${DEFAULT_LANG}}"

  printf "üîç Checking CV compilation (%s)...\n" "${lang}" \
    && typst compile --root . --input lang="${lang}" --format pdf "${CV_SRC}" /dev/null \
    && printf "‚úÖ CV check passed (%s)\n" "${lang}"
}

check_all_cv() {
  printf "üîç Checking CV compilation for all languages...\n"
  failed_langs=""
  success=true

  for lang in ${AVAILABLE_LANGS}; do
    if check_cv "${lang}"; then
      printf "‚úÖ %s check passed\n" "${lang}"
    else
      printf "‚ùå %s check failed\n" "${lang}"
      failed_langs="${failed_langs} ${lang}"
      success=false
    fi
  done

  if $success; then
    printf "‚úÖ All language checks passed\n"
  else
    printf "‚ùå Some language checks failed:%s\n" "${failed_langs}"
    return 1
  fi
}

fmt_cv() {
  printf "üé® Formatting files...\n" \
    && shfmt -i 2 -p -bn -w "${0}" \
    && find . -name "*.typ" -type f -exec typstyle --inplace {} + \
    && printf "‚úÖ Files formatted\n"
}

validate_cv() {
  printf "üîç Validating data consistency across languages...\n"
  validation_errors=0

  # check that base profile exists
  if [ ! -f "${SRC_DIR}/profile.yaml" ]; then
    printf "‚ùå Base profile.yaml not found\n"
    validation_errors=$((validation_errors + 1))
  else
    printf "‚úÖ Base profile.yaml found\n"
  fi

  # check that all language locales exist
  for lang in ${AVAILABLE_LANGS}; do
    locale_file="${SRC_DIR}/locales/${lang}.yaml"
    if [ ! -f "${locale_file}" ]; then
      printf "‚ùå Locale file missing: %s\n" "${locale_file}"
      validation_errors=$((validation_errors + 1))
    else
      printf "‚úÖ Locale file found: %s\n" "${locale_file}"
    fi
  done

  # check that all languages can compile
  for lang in ${AVAILABLE_LANGS}; do
    printf "üîç Testing compilation for %s...\n" "${lang}"
    if check_cv "${lang}" >/dev/null 2>&1; then
      printf "‚úÖ %s compilation successful\n" "${lang}"
    else
      printf "‚ùå %s compilation failed\n" "${lang}"
      validation_errors=$((validation_errors + 1))
    fi
  done

  if [ ${validation_errors} -eq 0 ]; then
    printf "‚úÖ All validations passed\n"
    return 0
  else
    printf "‚ùå %d validation errors found\n" "${validation_errors}"
    return 1
  fi
}

watch_cv() {
  lang="${1:-${DEFAULT_LANG}}"
  output_file="${OUTPUT_DIR}/jago-cv-${lang}.pdf"

  ensure_output \
    && printf "üëÄ Watching for changes (%s)...\n" "${lang}" \
    && typst watch --root . --input lang="${lang}" "${CV_SRC}" "${output_file}"
}

case "${1:-help}" in
help | --help | -h)
  show_help
  ;;
build)
  build_cv "${2}"
  ;;
build-all)
  build_all_cv
  ;;
check)
  check_cv "${2}"
  ;;
check-all)
  check_all_cv
  ;;
validate)
  validate_cv
  ;;
fmt)
  fmt_cv
  ;;
watch)
  watch_cv "${2}"
  ;;
*)
  perr "Unknown command: ${1}" \
    && perr "Run 'cv help' for available commands" \
    && exit 1
  ;;
esac
